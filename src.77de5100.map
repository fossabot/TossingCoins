{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.77de5100.map","sourceRoot":"../src","sourcesContent":["// This file is part of TossingCoins.\n\n// TossingCoins is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// /TossingCoins is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with /TossingCoins.  If not, see <http://www.gnu.org/licenses/>.\n\nfunction enterInput(event: KeyboardEvent): void {\n  if (event.key == 'Enter') { // Checks if enter key is pressed to display coin amounts\n    replyToss();\n  }\n}\n\n// Once the window has loaded, records keys pressed\nwindow.onload = () => document.addEventListener('keydown', enterInput);\n\nlet headsData: { [numberHeads: number]: number } = {}; // Stores the total amount of head\n\nlet runData = {\n  heads: 0,\n  tails: 0,\n  currentSide: 'neither'\n};\n\nlet highestRuns: number[] = [0, 0];\n\n// Displays the current amount of heads and tails\n// Function is run when button is clicked\nfunction replyToss(): void {\n  let htmlOutput: string; // Final outputted result\n\n  const coinInput = (document.getElementById(\"coinToss\") as HTMLInputElement).value; // Inputted Value\n  const coinAmount = Number(coinInput); // Converted to int (results in NaN if not possible)\n\n  const headsAmount = Math.floor(Math.random() * coinAmount); // Random number between 0 and coinAmount\n  const tailsAmount = coinAmount - headsAmount;\n\n  if (coinAmount <= 0 || isNaN(coinAmount)) { // Input has to be a number that is greater than 0\n    htmlOutput = \"INVALID OPTION\";\n  } else {\n    // If key does not exist, NaN is returned, which is falsey, and so it is then created with a value of 1\n    // If it does exist, it increases by 1\n    headsData[headsAmount] = (headsData[headsAmount] + 1) || 1;\n    // String values created of relevant amounts\n    // This is so that the greatest amount can be shown\n    let headsOutput = String(headsAmount);\n    let tailsOutput = String(tailsAmount);\n\n    // Value which is greatest gets a tick\n    if (headsAmount > tailsAmount) {\n      headsOutput += \" âœ…\";\n      runCounter('heads')\n\n    } else if (headsAmount < tailsAmount) {\n      tailsOutput += \" âœ…\";\n      runCounter('tails')\n    } else { // If both have the same value\n      headsOutput += \" ðŸ’°\";\n      tailsOutput += \" ðŸ’°\";\n      runCounter('neither')\n    }\n\n    htmlOutput = \"Heads Amount: \" + headsOutput + \"<br>\" + \"Tails Amount: \" + tailsOutput;\n    countTable(); // Table drawn with data on the amount of heads\n  }\n  // Receives current value and changes it to `htmlOutput`\n  (document.getElementById(\"tossOutput\") as HTMLInputElement).innerHTML = htmlOutput;\n}\n\n// Creates table showing the number of heads and their frequencies\nfunction countTable(): void {\n  // Headers created\n  let finalOutput = \"<table><tr><th>Number of Heads</th><th>Frequency</th></tr>\";\n// tslint:disable-next-line: forin\n  for (const item in headsData) { // Creates row for each item in headData\n    finalOutput += \"<tr><td>\" + String(item) + \"</td><td>\" + String(headsData[item]) + \"</td></tr>\";\n  }\n  // Generates new table each time\n  (document.getElementById(\"headsTable\") as HTMLInputElement).innerHTML = finalOutput + \"</table>\";\n}\n\n// Determines the highest run as well as the current run\nfunction runCounter(currentToss: string): void {\n  if (currentToss === 'neither'){ // It it's a tie\n      runData.heads = 0;\n      runData.tails = 0;\n    }\n  // Only the currentToss' counter can be increased\n  // It can be increased if it was the previous side or there is no current side\n  else if (currentToss === runData.currentSide ||  runData[currentToss] === 0) {\n    if (currentToss === 'heads') {\n      runData.heads += 1;\n      runData.tails = 0;\n    } else if (currentToss === 'tails') {\n      runData.heads = 0;\n      runData.tails += 1;\n    }\n\n    // Checks if current runs are greater than the highest runs\n    if (runData.heads > highestRuns[0]) {\n      highestRuns[0] = runData.heads;\n    } else if (runData.tails > highestRuns[1]) {\n      highestRuns[1] = runData.tails;\n    }\n    // Displays table showing highest runs\n    runTable();\n\n  }\n\n  // Changes current side\n  runData.currentSide = currentToss;\n}\n\n// Creates table showing runs\nfunction runTable(): void {\n  // Creates headers\n  let finalOutput = \"<table><tr><th>Coin Side</th><th>Highest Run</th></tr>\";\n\n  finalOutput += \"<tr><td>Heads</td><td>\" + String(highestRuns[0]) + \"</td></tr>\";\n  finalOutput += \"<tr><td>Tails</td><td>\" + String(highestRuns[1]) + \"</td></tr>\";\n\n  // Outputs table in the div `coinRuns`\n  (document.getElementById(\"coinRuns\") as HTMLInputElement).innerHTML = finalOutput + \"</table>\";\n}\n"]}