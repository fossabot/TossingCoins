{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,CAAoB,KAApB,EAAwC;AACtC,MAAI,KAAK,CAAC,GAAN,IAAa,OAAjB,EAA0B;AAAE;AAC1B,IAAA,SAAS;AACV;AACF,EAED;;;AACA,MAAM,CAAC,MAAP,GAAgB,YAAA;AAAM,SAAA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,UAArC,CAAA;AAAgD,CAAtE;;AAEA,IAAI,SAAS,GAAsC,EAAnD,EAAuD;AAEvD;AACA;;AACA,SAAA,SAAA,GAAA;AACI,MAAI,UAAJ,CADJ,CAC4B;;AAExB,MAAM,SAAS,GAAI,QAAQ,CAAC,cAAT,CAAwB,UAAxB,EAAyD,KAA5E,CAHJ,CAGuF;;AACnF,MAAM,UAAU,GAAG,MAAM,CAAC,SAAD,CAAzB,CAJJ,CAI0C;;AAEtC,MAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,UAA3B,CAApB,CANJ,CAMgE;;AAC5D,MAAM,WAAW,GAAG,UAAU,GAAG,WAAjC;;AAEA,MAAI,UAAU,IAAI,CAAd,IAAmB,KAAK,CAAC,UAAD,CAA5B,EAA0C;AAAE;AACxC,IAAA,UAAU,GAAG,gBAAb;AACH,GAFD,MAEO;AACH;AACA;AACA,IAAA,SAAS,CAAC,WAAD,CAAT,GAA0B,SAAS,CAAC,WAAD,CAAT,GAAyB,CAA1B,IAAgC,CAAzD,CAHG,CAIH;AACA;;AACA,QAAI,WAAW,GAAG,MAAM,CAAC,WAAD,CAAxB;AACA,QAAI,WAAW,GAAG,MAAM,CAAC,WAAD,CAAxB,CAPG,CASH;;AACA,QAAI,WAAW,GAAG,WAAlB,EAA+B;AAC3B,MAAA,WAAW,IAAI,IAAf;AACH,KAFD,MAEO,IAAI,WAAW,GAAG,WAAlB,EAA+B;AAClC,MAAA,WAAW,IAAI,IAAf;AACH,KAFM,MAEA;AAAE;AACL,MAAA,WAAW,IAAI,KAAf;AACA,MAAA,WAAW,IAAI,KAAf;AACH;;AAED,IAAA,UAAU,GAAG,mBAAmB,WAAnB,GAAiC,MAAjC,GAA0C,gBAA1C,GAA6D,WAA1E;AACA,IAAA,SAAS,GApBN,CAoBU;AAChB,GAhCL,CAiCI;;;AACC,EAAA,QAAQ,CAAC,cAAT,CAAwB,YAAxB,EAA2D,SAA3D,GAAuE,UAAvE;AACJ;;AAED,SAAA,SAAA,GAAA;AACI;AACA,MAAI,WAAW,GAAG,4DAAlB,CAFJ,CAGA;;AACI,OAAK,IAAM,IAAX,IAAmB,SAAnB,EAA8B;AAAE;AAC5B,IAAA,WAAW,IAAI,aAAa,MAAM,CAAC,IAAD,CAAnB,GAA4B,WAA5B,GAA0C,MAAM,CAAC,SAAS,CAAC,IAAD,CAAV,CAAhD,GAAoE,YAAnF;AACH,GANL,CAOI;;;AACC,EAAA,QAAQ,CAAC,cAAT,CAAwB,YAAxB,EAA2D,SAA3D,GAAuE,WAAW,GAAG,UAArF;AACJ","file":"src.77de5100.map","sourceRoot":"../src","sourcesContent":["function enterInput(event: KeyboardEvent): void {\n  if (event.key == 'Enter') { // Checks if enter key is pressed to display coin amounts\n    replyToss()\n  }\n}\n\n// Once the window has loaded, records keys pressed\nwindow.onload = () => document.addEventListener('keydown', enterInput);\n\nlet headsData: { [numberHeads: number]: number } = {}; // Stores the total amount of heads\n\n// Displays the current amount of heads and tails\n// Function is run when button is clicked\nfunction replyToss(): void {\n    let htmlOutput: string; // Final outputted result\n\n    const coinInput = (document.getElementById(\"coinToss\") as HTMLInputElement).value; // Inputted Value\n    const coinAmount = Number(coinInput); // Converted to int (results in NaN if not possible)\n\n    const headsAmount = Math.floor(Math.random() * coinAmount); // Random number between 0 and coinAmount\n    const tailsAmount = coinAmount - headsAmount;\n\n    if (coinAmount <= 0 || isNaN(coinAmount)) { // Input has to be a number that is greater than 0\n        htmlOutput = \"INVALID OPTION\";\n    } else {\n        // If key does not exist, NaN is returned, which is falsey, and so it is then created with a value of 1\n        // If it does exist, it increases by 1\n        headsData[headsAmount] = (headsData[headsAmount] + 1) || 1;\n        // String values created of relevant amounts\n        // This is so that the greatest amount can be shown\n        let headsOutput = String(headsAmount);\n        let tailsOutput = String(tailsAmount);\n\n        // Value which is greatest gets a tick\n        if (headsAmount > tailsAmount) {\n            headsOutput += \" âœ…\";\n        } else if (headsAmount < tailsAmount) {\n            tailsOutput += \" âœ…\";\n        } else { // If both have the same value\n            headsOutput += \" ðŸ’°\";\n            tailsOutput += \" ðŸ’°\";\n        }\n\n        htmlOutput = \"Heads Amount: \" + headsOutput + \"<br>\" + \"Tails Amount: \" + tailsOutput;\n        drawTable(); // Table drawn with data on the amount of heads\n    }\n    // Receives current value and changes it to `htmlOutput`\n    (document.getElementById(\"tossOutput\") as HTMLInputElement).innerHTML = htmlOutput;\n}\n\nfunction drawTable(): void {\n    // Headers created\n    let finalOutput = \"<table><tr><th>Number of Heads</th><th>Frequency</th></tr>\";\n// tslint:disable-next-line: forin\n    for (const item in headsData) { // Creates row for each item in headData\n        finalOutput += \"<tr><td>\" + String(item) + \"</td><td>\" + String(headsData[item]) + \"</td></tr>\";\n    }\n    // Generates new table each time\n    (document.getElementById(\"headsTable\") as HTMLInputElement).innerHTML = finalOutput + \"</table>\";\n}\n"]}